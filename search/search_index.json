{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Toggl CLI \u00b6 Toggl CLI is a Python utility which consists of Command-Line-Interface and Python's API Wrappers to interact with Toggl API. Each part is discussed in detail in corresponding section. Originally written by D. Robert Adams , currently maintained by Adam Uhlir . Installation \u00b6 To install Toggl CLI the easiest way is to use pip: $ pip install togglCli To use edge master you can also clone the repo and install it directly: $ git clone https://github.com/AuHau/toggl-cli $ cd toggl-cli $ pip install . Master branch should contain mostly working version. Configuration \u00b6 Toggl CLI heavily depends on user's configuration. Upon first usage of the CLI the user is taken through bootstrap process where he is asked questions regarding the desired settings and authentication credentials the final configuration is stored as configuration file at ~/.togglrc . If user select's to enter username & password, then the bootstrap process will convert it into API token which is then stored. Bootstrap on Windows Currently the bootstrap process is not available for Windows users. Upon the first usage of the CLI, Toggl CLI will create dummy config file and exit in order for user to configure it before next run. Use the bellow explanations to see available options. Plaintext credentials By default the authentication credentials are stored in plain text in your configuration file! Be aware of that! Migrations \u00b6 If you have used original version of Toggl CLI and have proper config file, upon the first run of the new version, Toggl CLI will try to migrate it into new format. Possible settings \u00b6 Name Type Default Description datetime_format string LTS L Setting which specifies the format in which all the datetimes will be printed. For syntax see Pendulum's doc . time_format string LTS Setting which specifies the format in which all the times will be printed. For syntax see Pendulum's doc . day_first bool False Setting which specifies behaviour for dateutils.parse() behaviour. Whether to interpret the first value in an ambiguous 3-integer date (e.g. 01/05/09) as the day (True) or month (False). year_first bool False Setting which specifies behaviour for dateutils.parse() behaviour. Whether to interpret the first value in an ambiguous 3-integer date (e.g. 01/05/09) as the year. If True, the first number is taken to be the year, otherwise the last number is taken to be the year. file_logging bool False Turns on/off logging into file specified by file_logging_path variable. file_logging_path string '' Specifies path where the logs will be stored. retries integer 2 In case when the HTTP API call is interrupted or the API rejects it because of throttling reasons, the tool will use exponential back-off with number of retries specified by this value. tz string None Timezone setting. If 'local' value is used then timezone from system's settings is used. If None, then timezone from Toggl's setting is used.","title":"About"},{"location":"#welcome-to-toggl-cli","text":"Toggl CLI is a Python utility which consists of Command-Line-Interface and Python's API Wrappers to interact with Toggl API. Each part is discussed in detail in corresponding section. Originally written by D. Robert Adams , currently maintained by Adam Uhlir .","title":"Welcome to Toggl CLI"},{"location":"#installation","text":"To install Toggl CLI the easiest way is to use pip: $ pip install togglCli To use edge master you can also clone the repo and install it directly: $ git clone https://github.com/AuHau/toggl-cli $ cd toggl-cli $ pip install . Master branch should contain mostly working version.","title":"Installation"},{"location":"#configuration","text":"Toggl CLI heavily depends on user's configuration. Upon first usage of the CLI the user is taken through bootstrap process where he is asked questions regarding the desired settings and authentication credentials the final configuration is stored as configuration file at ~/.togglrc . If user select's to enter username & password, then the bootstrap process will convert it into API token which is then stored. Bootstrap on Windows Currently the bootstrap process is not available for Windows users. Upon the first usage of the CLI, Toggl CLI will create dummy config file and exit in order for user to configure it before next run. Use the bellow explanations to see available options. Plaintext credentials By default the authentication credentials are stored in plain text in your configuration file! Be aware of that!","title":"Configuration"},{"location":"#migrations","text":"If you have used original version of Toggl CLI and have proper config file, upon the first run of the new version, Toggl CLI will try to migrate it into new format.","title":"Migrations"},{"location":"#possible-settings","text":"Name Type Default Description datetime_format string LTS L Setting which specifies the format in which all the datetimes will be printed. For syntax see Pendulum's doc . time_format string LTS Setting which specifies the format in which all the times will be printed. For syntax see Pendulum's doc . day_first bool False Setting which specifies behaviour for dateutils.parse() behaviour. Whether to interpret the first value in an ambiguous 3-integer date (e.g. 01/05/09) as the day (True) or month (False). year_first bool False Setting which specifies behaviour for dateutils.parse() behaviour. Whether to interpret the first value in an ambiguous 3-integer date (e.g. 01/05/09) as the year. If True, the first number is taken to be the year, otherwise the last number is taken to be the year. file_logging bool False Turns on/off logging into file specified by file_logging_path variable. file_logging_path string '' Specifies path where the logs will be stored. retries integer 2 In case when the HTTP API call is interrupted or the API rejects it because of throttling reasons, the tool will use exponential back-off with number of retries specified by this value. tz string None Timezone setting. If 'local' value is used then timezone from system's settings is used. If None, then timezone from Toggl's setting is used.","title":"Possible settings"},{"location":"api/","text":"","title":"API Wrappers"},{"location":"cli/","text":"Command Line Interface \u00b6 Upon installation of Toggl CLI with pip, it exposes the command line interface under binary toggl . In this section there will be explains the high-level overview of the CLI and several features. For detailed overview of all options for each command, please use --help parameter. Virtualenv and other modifications of Python environment As the toggl binary depends on the Python's environment, any action which would modify this environment, such as usage of virtualenv etc. might disable access to this binary. It depends on which environment you have Commands overview \u00b6 The CLI is designed to have several sub-commends which each corresponds to adequate section of the API. Here is presented brief overview of the hierarchy. toggl \u251c\u2500\u2500 add --- adds new time entry \u251c\u2500\u2500 clients \u2502 \u251c\u2500\u2500 add \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u2514\u2500\u2500 update \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 timezone --- sets/display timezone setting \u2502 \u2514\u2500\u2500 workspace --- sets/display default workspace setting \u251c\u2500\u2500 continue --- continue existing/last time entry \u251c\u2500\u2500 ls --- lists last time entries \u251c\u2500\u2500 now --- show/update currently runnig time entry \u251c\u2500\u2500 project_users --- list all project users in workspace \u251c\u2500\u2500 projects \u2502 \u251c\u2500\u2500 add \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u251c\u2500\u2500 update \u2502 \u2514\u2500\u2500 users \u2502 \u251c\u2500\u2500 add \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u2514\u2500\u2500 update \u251c\u2500\u2500 rm --- delete a time entry \u251c\u2500\u2500 start --- starts new time entry \u251c\u2500\u2500 stop --- stops running time entry \u251c\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 add \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u2514\u2500\u2500 update \u251c\u2500\u2500 users \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 ls \u2502 \u2514\u2500\u2500 signup --- creates new user \u251c\u2500\u2500 workspaces \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 invite --- invites user into the current workspace \u2502 \u251c\u2500\u2500 ls \u2502 \u2514\u2500\u2500 users \u2514\u2500\u2500 www --- opens web client Date/time formats \u00b6 Environmental variables \u00b6 It is possible to specify several options for the CLI commands through environmental variables. This can for example nicely play out for directory specific settings (for example for projects) with direnv tool. Generally this mechanism is available for commands that create new entities. Values specified through this way have priority over config values. You can see which options can be specified in command's help where at the options help is used (ENV: <name of variable>) syntax. Bellow you can see general overview of the variables: TOGGL_CONFIG - Defines which config file should be used. Should be absolute path. By default ~/.togglrc is used. TOGGL_WORKSPACE - Defines workspace to be used for the command, can be ID or Name of the Workspace. TOGGL_TASK - Defines task to be used, can be ID or Name of the Task. TOGGL_PROJECT - Defines project to be used, can be ID or Name of the Project. TOGGL_API_TOKEN - Defines Toggl's account which will be used for the API calls. TOGGL_USERNAME - Defines Toggl's account which will be used for the API calls. TOGGL_PASSWORD - Defines Toggl's account which will be used for the API calls.","title":"Command Line Interface"},{"location":"cli/#command-line-interface","text":"Upon installation of Toggl CLI with pip, it exposes the command line interface under binary toggl . In this section there will be explains the high-level overview of the CLI and several features. For detailed overview of all options for each command, please use --help parameter. Virtualenv and other modifications of Python environment As the toggl binary depends on the Python's environment, any action which would modify this environment, such as usage of virtualenv etc. might disable access to this binary. It depends on which environment you have","title":"Command Line Interface"},{"location":"cli/#commands-overview","text":"The CLI is designed to have several sub-commends which each corresponds to adequate section of the API. Here is presented brief overview of the hierarchy. toggl \u251c\u2500\u2500 add --- adds new time entry \u251c\u2500\u2500 clients \u2502 \u251c\u2500\u2500 add \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u2514\u2500\u2500 update \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 timezone --- sets/display timezone setting \u2502 \u2514\u2500\u2500 workspace --- sets/display default workspace setting \u251c\u2500\u2500 continue --- continue existing/last time entry \u251c\u2500\u2500 ls --- lists last time entries \u251c\u2500\u2500 now --- show/update currently runnig time entry \u251c\u2500\u2500 project_users --- list all project users in workspace \u251c\u2500\u2500 projects \u2502 \u251c\u2500\u2500 add \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u251c\u2500\u2500 update \u2502 \u2514\u2500\u2500 users \u2502 \u251c\u2500\u2500 add \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u2514\u2500\u2500 update \u251c\u2500\u2500 rm --- delete a time entry \u251c\u2500\u2500 start --- starts new time entry \u251c\u2500\u2500 stop --- stops running time entry \u251c\u2500\u2500 tasks \u2502 \u251c\u2500\u2500 add \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 ls \u2502 \u251c\u2500\u2500 rm \u2502 \u2514\u2500\u2500 update \u251c\u2500\u2500 users \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 ls \u2502 \u2514\u2500\u2500 signup --- creates new user \u251c\u2500\u2500 workspaces \u2502 \u251c\u2500\u2500 get \u2502 \u251c\u2500\u2500 invite --- invites user into the current workspace \u2502 \u251c\u2500\u2500 ls \u2502 \u2514\u2500\u2500 users \u2514\u2500\u2500 www --- opens web client","title":"Commands overview"},{"location":"cli/#datetime-formats","text":"","title":"Date/time formats"},{"location":"cli/#environmental-variables","text":"It is possible to specify several options for the CLI commands through environmental variables. This can for example nicely play out for directory specific settings (for example for projects) with direnv tool. Generally this mechanism is available for commands that create new entities. Values specified through this way have priority over config values. You can see which options can be specified in command's help where at the options help is used (ENV: <name of variable>) syntax. Bellow you can see general overview of the variables: TOGGL_CONFIG - Defines which config file should be used. Should be absolute path. By default ~/.togglrc is used. TOGGL_WORKSPACE - Defines workspace to be used for the command, can be ID or Name of the Workspace. TOGGL_TASK - Defines task to be used, can be ID or Name of the Task. TOGGL_PROJECT - Defines project to be used, can be ID or Name of the Project. TOGGL_API_TOKEN - Defines Toggl's account which will be used for the API calls. TOGGL_USERNAME - Defines Toggl's account which will be used for the API calls. TOGGL_PASSWORD - Defines Toggl's account which will be used for the API calls.","title":"Environmental variables"}]}